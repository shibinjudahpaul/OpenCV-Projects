# -*- coding: utf-8 -*-
"""
Created on Mon Feb  1 19:54:59 2021

@author: Shibin Judah Paul
"""


from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
import numpy as np
import matplotlib.pyplot as plt
#%matplotlib inline
import tensorflow as tf
import random
import cv2
import os

# files used to predict()
pred_path = '/kaggle/input/chest-xray-pneumonia/chest_xray/test'

class_labels = ["Covid", "Normal"]              

def plot_random_image(target_dir, sample = 5):
    """ To check in the files"""
    target_class=random.choice(os.listdir(target_dir))
    target_folder=os.path.join(target_dir,target_class)
    random_image=random.sample(os.listdir(target_folder),sample)
 
    plt.figure(figsize=(16,5))
    for i in range(sample):
        
        plt.subplot(1,sample,i+1)
        img=tf.io.read_file(os.path.join(target_folder,random_image[i]))
        img=tf.io.decode_image(img)
        plt.imshow(img)
        plt.title(f'Class: {target_class}\nShape: {img.shape}')
        plt.axis(False)           

def prepare_img(img):
    """To handle some preprocessing"""
    IMG_SIZE = 224
    img_array = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)

def pred_random_image(target_dir, sample = 1):
    """to choose a random image from a random label"""
    target_class=random.choice(os.listdir(target_dir))
    target_folder=os.path.join(target_dir,target_class)
    random_image=random.sample(os.listdir(target_folder),sample)
    for i in range(sample):
        img=tf.io.read_file(os.path.join(target_folder,random_image[i]))
        img=tf.io.decode_image(img)
    
    return target_class, np.array(img)


#target_path = '/kaggle/input/chest-xray-pneumonia/chest_xray/test'
#plot_random_image(target_path)

#load the model generated by training.py
covNet = load_model(r"../CovidDetector.model")

#obtain random image and random class
pred_class, rand_img = pred_random_image(pred_path)
print(f'Class: {pred_class}\nShape: {rand_img.shape}')

#use the model to predict the given image's class
prediction = covNet.predict(prepare_img(rand_img))
predicted_idx = np.argmax(prediction, axis=1)

print('Prediction:',class_labels[int(predicted_idx)])



    
    